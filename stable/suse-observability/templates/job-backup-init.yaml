{{- if and .Values.backup.enabled (or .Values.backup.stackGraph.restore.enabled .Values.backup.stackGraph.scheduled.enabled .Values.backup.elasticsearch.restore.enabled .Values.backup.elasticsearch.scheduled.enabled (index .Values "victoria-metrics-0" "backup" "enabled") (index .Values "victoria-metrics-1" "backup" "enabled") (index .Values "victoria-metrics-0" "restore" "enabled") (index .Values "victoria-metrics-1" "restore" "enabled") .Values.clickhouse.backup.enabled .Values.clickhouse.restore.enabled) }}
apiVersion: batch/v1
kind: Job
metadata:
  {{- if .Values.deployment.compatibleWithArgoCD }}
  generateName: backup-init-
  {{- else }}
  name: {{ template "common.fullname.short" . }}-backup-init-{{ now | date "02t150405" }}
  {{- end }}
  labels:
    app.kubernetes.io/component: backup
  annotations:
    {{- if .Values.deployment.compatibleWithArgoCD }}
    argocd.argoproj.io/hook: Sync
    {{- end }}
  {{- with .Values.backup.initJobAnnotations }}
    {{- toYaml . | nindent 4}}
  {{- end }}
spec:
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/component: backup
    spec:
      initContainers:
        - name: wait
          command:
            - sh
            - -c
            - |
              /entrypoint -c {{ include "stackstate.es.endpoint" . }},{{ include "stackstate.minio.endpoint" . }} -t 300
          image: "{{include "stackstate.wait.image.registry" .}}/{{ .Values.stackstate.components.wait.image.repository }}:{{ .Values.stackstate.components.wait.image.tag }}"
          imagePullPolicy: {{ .Values.stackstate.components.wait.image.pullPolicy | quote }}
      containers:
        - name: configure
          image: "{{include "stackstate.containerTools.image.registry" .}}/{{ .Values.stackstate.components.containerTools.image.repository }}:{{ .Values.stackstate.components.containerTools.image.tag }}"
          imagePullPolicy: {{ .Values.stackstate.components.containerTools.image.pullPolicy | quote }}
          command:
            - '/backup-restore-scripts/configure-backup.sh'
          env:
            {{- include "stackstate.backup.envvars" . | nindent 12 }}
          {{- with .Values.stackstate.components.containerTools.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- include "stackstate.backup.volumeMounts" . | nindent 12 }}
{{- if and .Values.backup.enabled .Values.backup.stackGraph.scheduled.enabled }}
            - name: tmp-data
              mountPath: /tmp-data
{{- end }}
      {{- include "stackstate.image.pullSecret.name" (dict "context" $) | nindent 6 }}
      restartPolicy: Never
{{- if .Values.backup.stackGraph.securityContext.enabled }}
      securityContext: {{- omit .Values.backup.stackGraph.securityContext "enabled" | toYaml | nindent 8 }}
{{- end }}
      volumes:
        {{- include "stackstate.backup.volumes" . | nindent 8 }}
{{- if and .Values.backup.enabled .Values.backup.stackGraph.scheduled.enabled }}
        - name: tmp-data
          persistentVolumeClaim:
            claimName: {{ template "common.fullname.short" . }}-backup-stackgraph-tmp-data
{{- end }}
{{- end }}
