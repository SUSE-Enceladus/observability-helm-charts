{{- define "stackstate.auth.secret" -}}
metadata:
  name: {{ template "common.fullname.short" . }}-auth
data:
{{- $apiAuth := .Values.stackstate.authentication -}}
{{- $authTypes := list -}}

{{- if $apiAuth.ldap }}
{{ $authTypes = append $authTypes "ldapAuthServer" }}
  {{- if $apiAuth.ldap.bind }}
  ldap_password: {{ $apiAuth.ldap.bind.password | b64enc | quote }}
  {{- end }}
{{- end }}

{{- if $apiAuth.oidc }}
{{- $authTypes = append $authTypes "oidcAuthServer" }}
  oidc_client_id: {{ $apiAuth.oidc.clientId | required "OIDC authentication requires the client id to be set." | b64enc | quote }}
  oidc_secret: {{ $apiAuth.oidc.secret | required "OIDC authentication requires the client secret to be set." | b64enc | quote }}
{{- end }}

{{- if $apiAuth.keycloak }}
{{- $authTypes = append $authTypes "keycloakAuthServer" }}
  keycloak_client_id: {{ $apiAuth.keycloak.clientId | required "Keycloak authentication requires the client id to be set." | b64enc | quote }}
  keycloak_secret: {{ $apiAuth.keycloak.secret | required "Keycloak authentication requires the client secret to be set." | b64enc | quote }}
{{- end }}

{{- if $apiAuth.file }}
{{- $authTypes = append $authTypes "stackstateAuthServer" }}
{{- if not $apiAuth.file.logins -}}
{{- fail "File configuration requires a non-empty list of logins to be specified with fields username, passwordHash and roles specified." -}}
{{- end }}
{{- range $apiAuth.file.logins }}
  {{- if not .roles -}}
  {{- printf "No roles specified for user %s" .username | fail -}}
  {{- end }}
  file_{{ regexReplaceAll "[^A-Za-z0-9]" (.username | required "A login requires a username") "_" }}_password: {{ .passwordHash | default .passwordMd5 | required "A login requires a password hash" | b64enc | quote }}
{{- end }}
{{- end }}

{{/*
Fallback to a standard 'admin' user with a specified password. Convenient for quick tests and configuration, but
for production this should be replaced with one of the other mechanisms.
*/}}
{{- if eq (len $authTypes) 0 }}
{{- $authTypes = append $authTypes "stackstateAuthServer" }}
{{- if $apiAuth.adminPassword }}
  default_password: {{ $apiAuth.adminPassword | b64enc | quote }}
{{- else }}
{{- fail "Helm value 'stackstate.authentication.adminPassword' is required when neither LDAP, OIDC, Keycloak nor file-based authentication has been configured" -}}
{{- end }}
{{- end }}

{{- if gt (len $authTypes) 1 -}}
{{- fail "More than 1 authentication mechanism specified. Please configure only one from: keycloak, oidc or ldap. If none are configured the default admin user will be made available with the stackstate.authentication.adminPassword." -}}
{{- end }}

{{- if $apiAuth.serviceToken.bootstrap.token }}
{{- $authTypes = append $authTypes "serviceTokenAuthServer" }}
  boostrap_token: {{ $apiAuth.serviceToken.bootstrap.token | b64enc | quote }}
{{- end }}

{{- end }}

{{- if not .Values.stackstate.authentication.fromExternalSecret }}
{{- $commonSecret := fromYaml (include "common.secret" .) -}}
{{- $stackstateApiKeySecret := fromYaml (include "stackstate.auth.secret" .) -}}
{{- toYaml (merge $stackstateApiKeySecret $commonSecret) -}}
{{- end }}
