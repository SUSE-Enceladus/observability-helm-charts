{{- define "stackstate.state.deployment.container.init" -}}
name: server-init
{{- if eq .Values.hbase.deployment.mode "Distributed" }}
command:
- sh
- -c
- |
  /entrypoint -c {{ include "stackstate.kafka.endpoint" . }},{{ include "stackgraph.hbase.waitfor" . }},{{ template "common.fullname.short" . }}-initializer:1618 -t 300
{{- else }}
command:
  - sh
  - -c
  - |
    /entrypoint -c {{ include "stackstate.kafka.endpoint" . }},{{- .Release.Name }}-hbase-stackgraph:2182,{{ template "common.fullname.short" . }}-initializer:1618 -t 300
{{- end }}
image: "{{include "stackstate.wait.image.registry" .}}/{{ .Values.stackstate.components.wait.image.repository }}:{{ .Values.stackstate.components.wait.image.tag }}"
imagePullPolicy: {{ .Values.stackstate.components.wait.image.pullPolicy | quote }}
{{- end -}}

{{- define "stackstate.state.deployment.container.main" -}}
args:
{{- include "stackstate.service.args" . }}
- -startRole
- state
envFrom:
  - secretRef:
      name: {{ include "stackstate.secret.name.license" .  }}
env:
{{- $serviceConfig := dict "ServiceName" "state" "ServiceConfig" .Values.stackstate.components.state }}
{{- $imageTagConfig := dict "ImageTag" .Values.stackstate.components.state.image.tag }}
{{- include "stackstate.service.envvars" (merge $serviceConfig .) }}
{{- include "stackstate.baseurls.envvars" . }}
{{- include "stackstate.metricstore.envvar" . }}
- name: ELASTICSEARCH_URI
  value: "http://{{ include "stackstate.es.endpoint" . }}"
- name: KAFKA_BROKERS
  value: {{ include "stackstate.kafka.endpoint" . | quote }}
- name: PROMETHEUS_WRITE_ENDPOINT
  value: http://{{ include "stackstate.vmagent.endpoint" . }}:8429/api/v1/write
- name: HADOOP_USER_NAME
  value: nobody
- name: ZOOKEEPER_QUORUM
  value: {{ include "stackgraph.zookeeper.endpoint" . | quote }}
- name: CONFIG_FORCE_stackstate_stackPacks_localStackPacksUri
  value: "hdfs://{{ .Release.Name }}-hbase-hdfs-nn-headful:9000/stackpacks"
  # Keep data for a longlong time (a day), we actually want to run stateservice from cache
- name: CONFIG_FORCE_stackgraph_vertex_cache_expireAfterSeconds
  value: "86400"
{{- include "stackstate.component.envsFromExistingSecrets" .Values.stackstate.components.all.envsFromExistingSecrets }}
{{- include "stackstate.component.envsFromExistingSecrets" .Values.stackstate.components.state.envsFromExistingSecrets }}
image: "{{ include "stackstate.image.registry" (merge $serviceConfig .) }}/{{ .Values.stackstate.components.state.image.repository }}{{ .Values.stackstate.components.all.image.repositorySuffix }}:{{ include "stackstate.server.image.tag" (merge $imageTagConfig .) }}"
imagePullPolicy: {{ default .Values.stackstate.components.all.image.pullPolicy .Values.stackstate.components.state.image.pullPolicy | quote }}
name: state
ports:
- containerPort: 1618
  name: health
{{- if .Values.stackstate.instanceDebugApi.enabled }}
- containerPort: 7080
  name: instance
{{- end }}
{{- if .Values.stackstate.components.all.metrics.enabled }}
- containerPort: 9404
  name: metrics
{{- end }}
readinessProbe:
  httpGet:
    path: /readiness
    port: health
  initialDelaySeconds: 10
  timeoutSeconds: 5
livenessProbe:
  httpGet:
    path: /liveness
    port: health
  initialDelaySeconds: 60
  timeoutSeconds: 5
{{- with .Values.stackstate.components.state.resources }}
resources:
  {{- toYaml . | nindent 2 }}
{{- end }}
volumeMounts:
{{- if .Values.stackstate.components.state.tmpToPVC }}
- name: tmp-volume
  mountPath: /tmp
{{- end}}
{{- include "stackstate.service.container.volumes" . }}
{{- if .Values.stackstate.experimental.storeTransactionLogsToPVC.enabled }}
{{ include "stackstate.service.transactionLog.volumeMount" . }}
{{- end }}
{{- end -}}

{{- define "stackstate.state.deployment" -}}
{{- $commonContainer := fromYaml (include "common.container" .) -}}
{{- $overrideContainer := fromYaml (include "stackstate.state.deployment.container.main" .) -}}
{{- $stsStackstateStateMainContainer := (merge $overrideContainer $commonContainer) -}}
{{- $overrideContainer := fromYaml (include "stackstate.state.deployment.container.init" .) -}}
{{- $stsStackstateServerInitContainer := (merge $overrideContainer $commonContainer) -}}
{{- $overrideContainer := fromYaml (include "stackstate.initContainer.ensure.no.server.statefulset.pods.are.running" .) -}}
{{- $stsStackstateServerEnsureNoServerStatefulSetPodsAreRunningContainer := (merge $overrideContainer $commonContainer) -}}

metadata:
  name: {{ template "common.fullname.short" . }}-state
  labels:
    app.kubernetes.io/component: state
    stackstate.com/connects-to-stackgraph: "true"
    stackstate.com/replicas: "1"
spec:
  replicas: {{ .Values.stackstate.components.state.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/component: state
  strategy:
{{- if eq (lower .Values.stackstate.components.all.deploymentStrategy.type) "recreatesingletonsonly" }}
    type: Recreate
{{- else }}
    {{- toYaml .Values.stackstate.components.all.deploymentStrategy | nindent 4 }}
{{- end }}
  template:
    metadata:
      annotations:
        {{- include "common.metrics.annotations" (dict "metrics" .Values.stackstate.components.all.metrics "port" "9404" "container_name" "state" "filter" .Values.stackstate.components.state.agentMetricsFilter) | indent 8 }}
        {{- include "stackstate.common.secret.checksum" . | nindent 8 }}
        {{- include "stackstate.license.secret.checksum" . | nindent 8 }}
        {{- include "stackstate.state.secret.checksum" . | nindent 8 }}
        {{- include "stackstate.state.configmap.checksum" . | nindent 8 }}
        {{- include "stackstate.component.podExtraAnnotations" (merge (dict "Name" "state") .) }}
      labels:
        app.kubernetes.io/component: state
        stackstate.com/connects-to-stackgraph: "true"
    spec:
      serviceAccountName: {{ template "common.fullname.short" . }}-state
      {{- include "stackstate.image.pullSecret.name" (dict "images" (list .Values.stackstate.components.all.image) "context" $) | nindent 6 }}
      initContainers:
      - {{ toYaml $stsStackstateServerInitContainer | nindent 8 }}
      - {{ toYaml $stsStackstateServerEnsureNoServerStatefulSetPodsAreRunningContainer | nindent 8 }}
      {{- if .Values.stackstate.experimental.storeTransactionLogsToPVC.enabled }}
      - {{ include "stackstate.initContainer.cleanTransactionLogsDirectory" . | nindent 8 }}
      {{- end }}
      {{- if .Values.stackstate.components.state.tmpToPVC }}
      - {{ include "stackstate.initContainer.cleanTmpDirectory" . | nindent 8 }}
      {{- end }}
      containers:
      - {{ toYaml $stsStackstateStateMainContainer | nindent 8 }}
    {{- if or .Values.stackstate.components.all.nodeSelector .Values.stackstate.components.state.nodeSelector }}
      nodeSelector:
      {{- with .Values.stackstate.components.all.nodeSelector }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stackstate.components.state.nodeSelector }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if or .Values.stackstate.components.all.affinity .Values.stackstate.components.state.affinity }}
      affinity:
      {{- with .Values.stackstate.components.all.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stackstate.components.state.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if or .Values.stackstate.components.all.tolerations .Values.stackstate.components.state.tolerations }}
      tolerations:
      {{- with .Values.stackstate.components.all.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stackstate.components.state.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if .Values.stackstate.components.all.securityContext.enabled }}
      securityContext: {{- omit .Values.stackstate.components.all.securityContext "enabled" | toYaml | nindent 8 }}
    {{- end }}
      volumes:
        {{- if .Values.stackstate.components.state.tmpToPVC }}
        - name: tmp-volume
          persistentVolumeClaim:
            claimName: {{ template "common.fullname.short" . }}-state-tmp
        {{- end}}
        {{- include "stackstate.service.pod.volumes" (dict "pod_name" "state" "root" . ) | nindent 8 }}
        {{- if .Values.stackstate.experimental.storeTransactionLogsToPVC.enabled }}
        {{- include "stackstate.service.transactionLog.volume" (dict "pod_name" "state" "root" . ) | nindent 8 }}
        {{- end }}
{{- end -}}

{{- if .Values.stackstate.experimental.server.split }}
{{- $commonDeployment := fromYaml (include "common.deployment" .) -}}
{{- $stateDeployment := fromYaml (include "stackstate.state.deployment" .) -}}
{{- toYaml (merge $stateDeployment $commonDeployment) -}}
{{- end}}
