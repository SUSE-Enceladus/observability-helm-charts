#####################
# General variables #
#####################

deployment:
  # deployment.annotations -- Annotations to attach to the `Deployment` object.
  annotations: {}

extraEnv:
  # extraEnv.open -- Extra open environment variables to inject into pods.
  open: {}
  # extraEnv.secret -- Extra secret environment variables to inject into pods via a `Secret` object.
  secret: {}

gitlab:
  # gitlab.app -- If CI is GitLab, specify the `app` for annotations.
  app: ""
  # gitlab.env -- If CI is GitLab, specify the `env` for annotations.
  env: ""

image:
  # image.registry -- Base container image registry
  registry: quay.io
  # image.repository -- Base container image repository.
  repository: stackstate/stackstate
  # image.tag -- Default container image tag.
  tag: sts-v1-14-13-1
  # image.pullPolicy -- Default container image pull policy.
  pullPolicy: IfNotPresent

# imagePullSecrets -- Extra secrets / credentials needed for container image registry.
imagePullSecrets: []

# nameOverride -- Override the name of the chart.
nameOverride: ""
# fullnameOverride -- Override the fullname of the chart.
fullnameOverride: ""

ingress:
  # ingress.annotations -- Annotations for ingress objects.
  annotations: {}
  # ingress.enabled -- Enable use of ingress controllers.
  enabled:
    false
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # ingress.hosts -- List of ingress hostnames; the paths are fixed to StackState backend services
  hosts:
    []
    # - host: stackstate.local
  path:
    # ingress.path.admin -- Ingress path to the admin service.
    admin: /admin
    # ingress.path.receiver -- Ingress path to the receiver service.
    receiver: /receiver
    # ingress.path.ui -- Ingress path to the base UI.
    ui: /
  # ingress.tls -- List of ingress TLS certificates to use.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - stackstate.local

livenessProbe:
  # livenessProbe.enabled -- Enable use of livenessProbe check.
  enabled: true
  # livenessProbe.failureThreshold -- `failureThreshold` for the liveness probe.
  failureThreshold: 3
  # livenessProbe.initialDelaySeconds -- `initialDelaySeconds` for the liveness probe.
  initialDelaySeconds: 180
  # livenessProbe.periodSeconds -- `periodSeconds` for the liveness probe.
  periodSeconds: 10
  # livenessProbe.successThreshold -- `successThreshold` for the liveness probe.
  successThreshold: 1
  # livenessProbe.timeoutSeconds -- `timeoutSeconds` for the liveness probe.
  timeoutSeconds: 5

pod:
  # pod.annotations -- Annotations to attach to the `Pod` object(s).
  annotations: {}

readinessProbe:
  # readinessProbe.enabled -- Enable use of readinessProbe check.
  enabled: true
  # readinessProbe.failureThreshold -- `failureThreshold` for the readiness probe.
  failureThreshold: 3
  # readinessProbe.initialDelaySeconds -- `initialDelaySeconds` for the readiness probe.
  initialDelaySeconds: 180
  # readinessProbe.periodSeconds -- `periodSeconds` for the readiness probe.
  periodSeconds: 10
  # readinessProbe.successThreshold -- `successThreshold` for the readiness probe.
  successThreshold: 1
  # readinessProbe.timeoutSeconds -- `timeoutSeconds` for the readiness probe.
  timeoutSeconds: 5

# replicaCount -- Amount of replicas to create for the `Deployment` object.
replicaCount: 1

persistence:
  # persistence.accessMode -- Access mode of the persistent volume claim.
  accessMode: ReadWriteOnce
  # persistence.annotations -- Annotations to attach to the `PersistentVolumeClaim` object.
  annotations: {}
  # persistence.enabled -- Enable use of persistence.
  enabled: false
  # persistence.size -- Size (in GiB) of the persistent volume.
  size: 20Gi
  # persistence.storageClass -- Name of the storage class to use for the persistent volume.
  storageClass: gp2

# resources -- Resource requests / limits.
resources:
  limits:
    memory: "15Gi"
  requests:
    memory: "15Gi"

service:
  # service.annotations -- Annotations to attach to the `Service` object.
  annotations: {}
  ui:
    # service.ui.port -- The default port for the StackState UI.
    port: 7070
  receiver:
    # service.receiver.port -- The default port for the StackState Receiver.
    port: 7077
  admin:
    # service.admin.port -- The default port for the StackState Administration area.
    port: 7071
  # service.type -- The Kubernetes 'Service' type to use.
  type: ClusterIP

# nodeSelector -- Node labels for pod assignment.
nodeSelector: {}

# tolerations -- Toleration labels for pod assignment.
tolerations: []

# affinity -- Affinity settings for pod assignment.
affinity: {}

########################
# StackState variables #
########################

stackstate:
  admin:
    authentication:
      # stackstate.admin.authentication.enabled -- Enable basic auth protection for the /admin endpoint.
      enabled: true
  license:
    # stackstate.license.key -- (string) **PROVIDE YOUR LICENSE KEY HERE** The StackState license key needed to start the server.
    key:
  # stackstate.web.baseUrl -- (string) **PROVIDE YOUR BASE URL HERE** Externally visible baseUrl of StackState.
  baseUrl:
  receiver:
    # stackstate.receiver.apiKey -- API key to be used by the Receiver; if no key is provided, a random one will be generated for you.
    apiKey: ""
    # stackstate.receiver.baseUrl -- (string) **DEPRECATED** Use stackstate.baseUrl instead
    baseUrl:
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
