{{- define "hbase.hdfs.datanode.container.init" -}}
name: datanode-init
command:
- bash
- -c
- |
  /entrypoint -c {{ template "common.fullname.short" . }}-hdfs-nn-headful:9000 -t 300
  mkdir -p /hadoop-data/data
  # migrate old data directory location
  if [ -e /hadoop-data/current ]; then
    GLOBIGNORE=data:lost+found
    mv /hadoop-data/* /hadoop-data/data/
  fi
  {{- if .Values.hdfs.volumePermissions.enabled }}
  chown -R {{ .Values.hdfs.securityContext.runAsUser }}:{{ .Values.hdfs.securityContext.runAsGroup }} /hadoop-data
  {{- end }}
image: "{{ include "common.image.registry" (dict "image" .Values.wait.image "context" .) }}/{{ .Values.wait.image.repository }}:{{ .Values.wait.image.tag }}"
imagePullPolicy: {{ .Values.wait.image.pullPolicy | quote }}
{{- if .Values.hdfs.volumePermissions.securityContext.enabled }}
securityContext: {{- omit .Values.hdfs.volumePermissions.securityContext "enabled" | toYaml | nindent 2 }}
{{- end }}
volumeMounts:
- name: data
  mountPath: /hadoop-data
{{- end -}}

{{- define "hbase.hdfs.datanode.container.main" -}}
name: datanode
image: "{{ include "common.image.registry" (dict "image" .Values.all.image "context" .) }}/{{ .Values.hdfs.image.repository }}:{{ .Values.hdfs.image.tag }}"
imagePullPolicy: {{ .Values.hdfs.image.pullPolicy }}
args:
- /entrypoint.sh
- /run.sh
- datanode
env:
{{- include "hbase.hdfs.commonEnv" . }}
{{- include "all.commonEnv" . }}
{{- include "hdfs.datanode.commonEnv" . }}
ports:
- containerPort: 50010
  name: dn
- containerPort: 50075
  name: dninfo
{{- if .Values.all.metrics.enabled }}
- containerPort: 9404
  name: metrics
{{- end }}
livenessProbe:
  exec:
    command:
      - /dn-scripts/check-status.sh
  initialDelaySeconds: 60
  periodSeconds: 30
readinessProbe:
  exec:
    command:
      - /dn-scripts/check-status.sh
  initialDelaySeconds: 60
  periodSeconds: 30
  successThreshold: 1
{{- with .Values.hdfs.datanode.resources }}
resources:
  {{- toYaml . | nindent 2 }}
{{- end }}
securityContext:
  runAsNonRoot: true
volumeMounts:
- name: data
  mountPath: /hadoop-data
- name: dn-scripts
  mountPath: /dn-scripts
{{- end -}}

{{- define "hbase.hdfs.datanode.statefulset" -}}
{{- $commonContainer := fromYaml (include "common.container" .) -}}
{{- $overrideContainer := fromYaml (include "hbase.hdfs.datanode.container.main" .) -}}
{{- $stackstateHbaseHdfsDatanodeContainer := (merge $overrideContainer $commonContainer) }}
{{- $overrideContainer := fromYaml (include "hbase.hdfs.datanode.container.init" .) -}}
{{- $stackstateHbaseHdfsDatanodeInitContainer := (merge $overrideContainer $commonContainer) }}
metadata:
  labels:
    app.kubernetes.io/component: hdfs-dn
  name: {{ template "common.fullname.short" . }}-hdfs-dn
spec:
  podManagementPolicy: Parallel
  replicas: {{ .Values.hdfs.datanode.replicaCount }}
  serviceName: {{ template "common.fullname.short" . }}-hdfs-dn
  selector:
    matchLabels:
      app.kubernetes.io/component: hdfs-dn
  template:
    metadata:
      labels:
        app.kubernetes.io/component: hdfs-dn
      annotations:
      {{ include "common.metrics.annotations" (dict "metrics" .Values.all.metrics "port" "9404" "container_name" "datanode" "filter" .Values.hdfs.datanode.agentMetricsFilter) | indent 8 }}
    spec:
      {{- include "common.image.pullSecret.name" (dict "images" (list .Values.all.image) "context" $) | nindent 6 }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ template "common.fullname.short" . }}-hdfs
      {{- end }}
      {{- if .Values.hdfs.securityContext.enabled }}
      securityContext: {{- omit .Values.hdfs.securityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
      - {{ toYaml $stackstateHbaseHdfsDatanodeInitContainer | nindent 8 }}
      containers:
      - {{ toYaml $stackstateHbaseHdfsDatanodeContainer | nindent 8 }}
    {{- if or .Values.all.nodeSelector .Values.hdfs.datanode.nodeSelector }}
      nodeSelector:
      {{- with .Values.all.nodeSelector }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hdfs.datanode.nodeSelector }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if or .Values.all.affinity .Values.hdfs.datanode.affinity }}
      affinity:
      {{- with .Values.all.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hdfs.datanode.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
      terminationGracePeriodSeconds: {{ .Values.hdfs.datanode.terminationGracePeriodSeconds }}
    {{- if or .Values.all.tolerations .Values.hdfs.datanode.tolerations }}
      tolerations:
      {{- with .Values.all.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hdfs.datanode.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
      volumes:
    {{- if not .Values.hdfs.datanode.persistence.enabled }}
      - name: data
        emptyDir: {}
    {{- end }}
      - name: dn-scripts
        configMap:
          name: {{ template "common.fullname.short" . }}-hdfs-dn-scripts
          defaultMode: 0755
{{- if .Values.hdfs.datanode.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: {{ .Values.hdfs.datanode.persistence.accessModes }}
      resources:
        requests:
          storage: {{ .Values.hdfs.datanode.persistence.size }}
    {{- if .Values.hdfs.datanode.persistence.storageClass }}
      {{- if (eq "-" .Values.hdfs.datanode.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.hdfs.datanode.persistence.storageClass | quote }}
      {{- end }}
    {{- end }}
{{- end }}
{{- end -}}

{{- $commonStatefulSet := fromYaml (include "common.statefulset" .) -}}
{{- $stackstateHbaseHdfsDatanodeStatefulSet := fromYaml (include "hbase.hdfs.datanode.statefulset" .) -}}
{{- toYaml (merge $stackstateHbaseHdfsDatanodeStatefulSet $commonStatefulSet) -}}
