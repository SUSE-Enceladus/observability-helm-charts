opentelemetry-demo:
  default:
    podSecurityContext:
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
  components:
    featureflagService:
      envOverrides:
        - name: DISABLE_FEATURE_FLAGS
          value: "false"
      resources:
        limits:
          memory: null
      imageOverride:
        repository: quay.io/stackstate/opentelemetry-demo
        tag: dev-11b1c878-featureflagservice
    ffsPostgres:
      podSecurityContext:
        runAsGroup: 70
        runAsNonRoot: true
        runAsUser: 70
      mountedConfigMaps:
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d/99-ffs_update.sql
          subPath: 99-ffs_update.sql
          data:
            99-ffs_update.sql: |
              UPDATE public.featureflags SET enabled = 1 WHERE name = 'adServiceFailure';
    loadgenerator:
      imageOverride:
        repository: quay.io/stackstate/opentelemetry-demo
        tag: dev-7a35e404-loadgenerator
  opentelemetry-collector:
    config:
      # the spanmetrics connector gets lost without at least some config present
      # a (semi)random property (exemplars.enabled) is used here with its default value
      connectors:
        spanmetrics:
          exemplars:
            enabled: false

featureflags:
  demoScenarioSimulation:
    # featureflags.demoScenarioSimulation.enabled -- Whether the k8s demo scenario should be enabled.
    enabled: true
    # featureflags.demoScenarioSimulation.schedule -- The cron schedule to trigger the k8s demo scenario.
    schedule:
      # featureflags.demoScenarioSimulation.schedule.failure -- The cron schedule to trigger the faulty k8s demo scenario.
      failure: "0 * * * *"
      # featureflags.demoScenarioSimulation.schedule.fix -- The cron schedule to fix the faulty k8s demo scenario.
      fix: "30 * * * *"
